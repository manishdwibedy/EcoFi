{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "window.addEventListener('load', function () {\r\n\r\n    if (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.web3 !== \"undefined\" &&\r\n        typeof window.ethereum !== \"undefined\"\r\n      ) {\r\n        ethereum\r\n          .enable()\r\n          .then(function(accounts) {\r\n            console.log(accounts);\r\n          })\r\n          .catch(function(reason) {\r\n            // Handle error. Likely the user rejected the login:\r\n            console.log(reason === \"User rejected provider access\");\r\n          });\r\n      \r\n        web3 = new Web3(window.ethereum);\r\n        initAddress();\r\n      }     \r\n})\r\n\r\nfunction initAddress() {\r\n    web3.eth.getAccounts((err, accounts) => {\r\n        document.querySelector('#from').value = accounts[0];\r\n        document.getElementById('result').innerText = 100;\r\n        listenForClicks()\r\n    })\r\n}\r\n\r\nfunction handleTransactionRequest(txHash) {\r\n    console.info(`Checking for transaction completion of ${txHash}`)\r\n    web3.eth.getTransaction(txHash, (err, transaction) => {\r\n        if (transaction) {\r\n            if (transaction.transactionIndex) {\r\n                console.info(`Transaction complete ${txHash}`)\r\n                document.querySelector('#statusMessage').innerText = `Mined on block ${transaction.blockNumber} with transaction index ${transaction.transactionIndex}`\r\n            } else {\r\n                console.info(`Transaction not yet complete ${txHash}`)\r\n                window.setTimeout(() => handleTransactionRequest(txHash), 2000)\r\n            }\r\n        } else if (err) {\r\n            console.log(`getTransaction callback error: ${err} /`)\r\n        }\r\n    })\r\n}\r\n\r\nfunction listenForClicks() {\r\n    let button = document.querySelector('#sendButton')\r\n\r\n    button.addEventListener('click', function () {\r\n        const val = parseFloat(document.querySelector('#calc').value);\r\n        const weiValue = val * 10**18;\r\n        const transactionParameters = {\r\n            nonce: '0x00', // ignored by MetaMask\r\n            gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\r\n            gas: '0x5208', // customizable by user during MetaMask confirmation.\r\n            to: '0xDA508097907811fa0D39B595F89ED2ca0A084166', // Required except during contract publications.\r\n            from: document.querySelector('#from').value, // must match user's active address.\r\n            value: '0x' + weiValue.toString(16), // Only required to send ether to the recipient from the initiating external account.\r\n            // data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057', // Optional, but used for defining smart contract creation and interaction.\r\n            chainId: 3, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\r\n        };\r\n        \r\n\r\n        web3.eth.sendTransaction(transactionParameters, function(err, transactionHash) {\r\n            if (err) { \r\n                console.log(err); \r\n            } else {\r\n                console.log(transactionHash);\r\n            }\r\n        });\r\n    })\r\n}"
  ]
}